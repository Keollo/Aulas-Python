# -*- coding: utf-8 -*-
"""8.1-Set_Exercícios.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dmQt4S-et1vGEjEBZK155fabNgdpm4jW

# Set

## Aula 8.1

### Q1.

Dada uma string qualquer, use seu conhecimento de sets para apresentar os caracteres únicos que aparecem na string, ordenados alfabeticamente e sem duplicatas. Preste atenção em duplicatas de maiúsculas e minúsculas.
"""

frase = "O rato roeu a roupa do Robson"

# Implemente solução
def caracteres_unicos(frase):
    # Convertemos a string para minúsculas para evitar duplicatas de maiúsculas e minúsculas
    frase = frase.lower()
    # Usamos um set para obter caracteres únicos
    caracteres = set(frase)
    # Removemos espaços em branco
    caracteres.discard(' ')
    # Ordenamos os caracteres
    caracteres_ordenados = sorted(caracteres)
    return caracteres_ordenados

# Testando a solução
caracteres = caracteres_unicos(frase)
print("Caracteres únicos ordenados:", caracteres)

"""### Q2

Desenvolva uma função em Python chamada ```tem_elementos_comuns()``` que recebe duas listas como parâmetros e retorna True se houver algum elemento comum entre as duas listas, e False caso contrário. Utilize sets para resolver essa tarefa.
"""

# Implemente a função
def tem_elementos_comuns(lista1, lista2):
    set1 = set(lista1)
    set2 = set(lista2)
    # Verificamos interseção
    return not set1.isdisjoint(set2)
    # Execute esta célula para testar a função da Q2.

lista1 = [1, 2, 3, 4]
lista2 = [3, 4, 5, 6, 7]
resultado = tem_elementos_comuns(lista1, lista2)
print(resultado)  # Saída esperada: True

"""### Q3.

Você vai coletar de diferentes turmas de alunos seus interesses em atividades extra curriculares dentre futebol, vôlei, rugby, música, teatro, ações comunitárias. Informe o conjunto de atividades comuns a todas a turmas. Pode preencher o iterável turmas com valores arbitrários.

"""

turmas = [
     {'ações comunitárias', 'futebol', 'música', 'rugby'},
     {'ações comunitárias', 'música', 'rugby', 'teatro'},
     {'música', 'rugby', 'teatro', 'vôlei'},
     {'música', 'vôlei', 'rugby'},
     {'ações comunitárias', 'futebol', 'rugby', 'teatro', 'vôlei'},
     {'ações comunitárias', 'futebol', 'rugby'},
     {'ações comunitárias', 'rugby', 'teatro', 'vôlei'},
     {'ações comunitárias', 'rugby', 'teatro', 'vôlei'},
     {'ações comunitárias', 'rugby', 'vôlei'}
]
# Implemente aqui sua solução
def atividades_comuns(turmas):
    atividades_comuns = set(turmas[0])
    for turma in turmas[1:]:
        atividades_comuns &= turma
    return atividades_comuns

# Testando a solução
atividades = atividades_comuns(turmas)
print("Atividades comuns a todas as turmas:", atividades)

"""### Q4.
Considere duas listas que são duplicatas uma da outra, exceto por um elemento, exemplo:
```
A = [1, 4, 5, 7, 9]
B = [4, 5, 7, 9]
```

Encontre e apresente o elemento diferente, informando também qual das listas está desfalcada. Para o exemplo acima, a saída esperada é
```
O elemento 1 está faltando na segunda lista
```
"""

A = [1, 4, 5, 7, 9]
B = [4, 5, 7, 9]

# Implemente aqui sua solução
def elemento_diferente(lista1, lista2):
    set1 = set(lista1)
    set2 = set(lista2)
    diferenca = set1.symmetric_difference(set2)
    if len(lista1) > len(lista2):
        return f"O elemento {diferenca.pop()} está faltando na segunda lista"
    else:
        return f"O elemento {diferenca.pop()} está faltando na primeira lista"

# Testando a solução
diferenca = elemento_diferente(A, B)
print(diferenca)  # Saída esperada: O elemento 1 está faltando na segunda lista

"""### Q5.

Panagramas são frases que contém todas as letras do alfabeto pelo menos uma vez. Crie uma função ```checa_panagrama``` que recebe uma string e retorna ```True``` caso seja um panagrama ou ```False```caso contrário. Use seu conhecimento de sets para solucionar essa questão.

Ex:
```
Entrada: "The quick brown fox jumps over the lazy dog"
Saída: É um panagrama
```

```
Entrada: "Python é uma linguagem de programação"
Saída: Não é um panagrama
```
"""

# Implemente aqui a função checa_panagrama
def checa_panagrama(frase):
    alfabeto = set("abcdefghijklmnopqrstuvwxyz")
    # Convertemos a string para minúsculas e criamos um set dos caracteres da frase
    frase_set = set(frase.lower())
    # Verificamos se o alfabeto é um subconjunto dos caracteres da frase
    return alfabeto.issubset(frase_set)

# Testando a solução
frase1 = "The quick brown fox jumps over the lazy dog"
frase2 = "Python é uma linguagem de programação"
print(f"A frase '{frase1}' é um panagrama? {'Sim' if checa_panagrama(frase1) else 'Não'}")
print(f"A frase '{frase2}' é um panagrama? {'Sim' if checa_panagrama(frase2) else 'Não'}")