# -*- coding: utf-8 -*-
"""8.2-Tupla_Exercícios.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/199d66fTkvUEXs9QlonLoZNxzYytw9pEv

# Tupla

## Aula 8.2

### Q1.

Escreva uma função ```calcula_area_perimetro``` que recebe **apenas um parâmetro** ```dimensoes``` e calcula a área e o perímetro a partir das dimensões dadas.
- ```dimensoes``` é uma tupla (largura, comprimento) com as dimensões de um terreno retangular
- Sua função deve calcular e retornar as seguintes operações
   - $area = largura \times comprimento$
   - $perimetro = 2\times(largura + comprimento)$
"""

# Implemente aqui a função calcula_area_perimetro
def calcula_area_perimetro(dimensoes):
    largura, comprimento = dimensoes
    area = largura * comprimento
    perimetro = 2 * (largura + comprimento)
    return area, perimetro

# Complete o exemplo de uso abaixo
largura = 5
comprimento = 7

retorno = calcula_area_perimetro((largura, comprimento))
print(retorno, type(retorno))

"""### Q2.

Dada uma string, imprima todas as vogais que aparecem na string, bem como todos os índices onde elas ocorrem. Para isso, use a função ```enumerate```.

"""

# Implemente aqui sua solução
frase = "O rato roeu a roupa da Alice"

vogais = "aeiouAEIOU"
indices_vogais = [(idx, letra) for idx, letra in enumerate(frase) if letra in vogais]

print("Vogais e seus índices na frase:")
for idx, letra in indices_vogais:
    print(f"Vogal '{letra}' no índice {idx}")

"""### Q3.

Escreva uma função em Python chamada ```ordenar_tuplas``` que recebe uma lista de tuplas, cada uma contendo o nome de um aluno e sua respectiva média, e retorna uma nova lista ordenada em ordem decrescente de médias.
"""

# Implemente aqui a função ordenar_tuplas
def ordenar_tuplas(alunos_notas):
    return sorted(alunos_notas, key=lambda x: x[1], reverse=True)

# Exemplo de uso:
alunos_notas = [('Alice', 8.5), ('Bob', 7.2), ('Charlie', 9.0), ('David', 8.8)]
resultado = ordenar_tuplas(alunos_notas)
print(resultado)
# Saída esperada: [('Charlie', 9.0), ('David', 8.8), ('Alice', 8.5), ('Bob', 7.2)]

"""### Q4.

Escreva uma função em Python chamada ```comprimir_tuplas``` que recebe uma lista de tuplas, cada uma contendo uma palavra e um número, e retorna uma nova lista de tuplas onde palavras idênticas são agrupadas e seus números são somados.


"""

# Implemente aqui a função comprimir_tuplas
def comprimir_tuplas(tuplas_originais):
    resultado = {}
    for palavra, numero in tuplas_originais:
        if palavra in resultado:
            resultado[palavra] += numero
        else:
            resultado[palavra] = numero
    return list(resultado.items())

# Exemplo de uso:
tuplas_originais = [('maçã', 3), ('banana', 2), ('maçã', 5), ('laranja', 1), ('banana', 3)]
resultado = comprimir_tuplas(tuplas_originais)
print(resultado)
# Saída esperada: [('maçã', 8), ('banana', 5), ('laranja', 1)]

"""### Q5.

- Escreva um script que peça o nome e a idade de todos na fila de uma balada. Crie uma lista de tuplas com os pares ```(nome, idade)``` de cada um.
- Em seguida crie e imprima duas tuplas apenas com os nomes, uma com os menores de idade que não poderão entrar, e uma com os maiores de idade (```idade >= 18```).


"""

# Pedir nome e idade das pessoas na fila da balada
fila_balada = []
while True:
    nome = input("Digite o nome (ou 'sair' para encerrar): ")
    if nome.lower() == 'sair':
        break
    idade = int(input("Digite a idade: "))
    fila_balada.append((nome, idade))

# Criar lista de tuplas com pares (nome, idade)
pessoas = fila_balada

# Filtrar menores e maiores de idade
menores_idade = [(nome, idade) for nome, idade in pessoas if idade < 18]
maiores_idade = [(nome, idade) for nome, idade in pessoas if idade >= 18]

# Imprimir os resultados
print("Menores de idade (não podem entrar):")
for nome, idade in menores_idade:
    print(f"{nome} - {idade} anos")

print("\nMaiores de idade (podem entrar):")
for nome, idade in maiores_idade:
    print(f"{nome} - {idade} anos")