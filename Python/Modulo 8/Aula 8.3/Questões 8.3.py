# -*- coding: utf-8 -*-
"""8.3-Dicionario_Exercícios.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RmsMH62-0l4u6upaKuTbDhAC4KF06IFg

# Dicionários

## Aula 8.3

### Q1.

Escreva uma função em Python chamada ```contagem_caracteres``` que recebe uma string como parâmetro e retorna um dicionário onde as chaves são os caracteres presentes na string e os valores são a contagem de cada caractere.
"""

def contagem_caracteres(frase):
    contagem = {}
    for caracter in frase:
        if caracter in contagem:
            contagem[caracter] += 1
        else:
            contagem[caracter] = 1
    return contagem

# Exemplo de uso:
frase = "python programming"
resultado = contagem_caracteres(frase)
print(resultado)

"""### Q2.

Baixe o arquivo contendo o roteiro do filme brasileiro "Estômago" e salve em seu computador com o nome "estomago.txt".

https://aplauso.imprensaoficial.com.br/edicoes/12.0.813.502/12.0.813.502.txt

- Escreva um script python que abre o arquivo de texto e cria um dicionário contando a quantidade de vezes que cada palavra aparece no texto.
- Em seguida ordene o dicionário de forma decrescente pelos valores. Dessa maneira ele irá apresentar as palavras mais frequentes no início.
- Apresente na tela o dicionário ordenado

"""

import string

def contar_palavras_arquivo(nome_arquivo):
    try:
        with open(nome_arquivo, 'r', encoding='utf-8') as arquivo:
            conteudo = arquivo.read()
            # Remover pontuações e converter para minúsculas
            conteudo = conteudo.translate(str.maketrans('', '', string.punctuation)).lower()
            palavras = conteudo.split()
            contagem = {}
            for palavra in palavras:
                if palavra in contagem:
                    contagem[palavra] += 1
                else:
                    contagem[palavra] = 1
            return contagem
    except FileNotFoundError:
        print(f"Erro: O arquivo '{nome_arquivo}' não foi encontrado.")
        return {}

def ordenar_por_frequencia(contagem_palavras):
    return dict(sorted(contagem_palavras.items(), key=lambda item: item[1], reverse=True))

def main():
    nome_arquivo = input("Digite o nome do arquivo de texto (inclua o caminho se estiver em outro diretório): ")
    contagem_palavras = contar_palavras_arquivo(nome_arquivo)

    if contagem_palavras:
        resultado_ordenado = ordenar_por_frequencia(contagem_palavras)
        print("Palavras mais frequentes no texto:")
        for palavra, frequencia in resultado_ordenado.items():
            print(f"{palavra}: {frequencia}")
    else:
        print("Não foi possível obter a contagem de palavras.")

if __name__ == "__main__":
    main()

"""### Q3.

Crie uma função chamada ```mesclar_dicionarios``` que recebe dois dicionários como parâmetros e retorna um novo dicionário contendo a fusão dos dois. Se houver chaves comuns, o maior valor deve prevalecer.
"""

def mesclar_dicionarios(dicionario1, dicionario2):
    resultado = dicionario1.copy()
    for chave, valor in dicionario2.items():
        if chave in resultado:
            if valor > resultado[chave]:
                resultado[chave] = valor
        else:
            resultado[chave] = valor
    return resultado

# Exemplo de uso:
dicionario1 = {'a': 1, 'b': 2, 'c': 3}
dicionario2 = {'b': 4, 'd': 5}
resultado = mesclar_dicionarios(dicionario1, dicionario2)
print(resultado)
# Saída esperada: {'a': 1, 'b': 4, 'c': 3, 'd': 5}

"""### Q4.

Desenvolva uma função em Python chamada ```filtrar_dicionario``` que recebe um dicionário e uma lista de chaves como parâmetros e retorna um novo dicionário contendo apenas as chaves que estão presentes na lista.
"""

def filtrar_dicionario(dados, chaves_filtradas):
    resultado = {}
    for chave in chaves_filtradas:
        if chave in dados:
            resultado[chave] = dados[chave]
    return resultado

# Exemplo de uso:
dados = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}
chaves_filtradas = ['a', 'c', 'e']
resultado = filtrar_dicionario(dados, chaves_filtradas)
print(resultado)
# Saída esperada: {'a': 1, 'c': 3, 'e': 5}

"""### Q5.

Você está responsável por analisar os resultados de uma votação. Cada voto é representado por um dicionário com o nome do candidato e a quantidade de votos que recebeu em uma determinada sessão eleitoral. Escreva uma função chamada ```resultado_votacao``` que recebe uma lista de dicionários de votos e retorna um dicionário onde as chaves são os nomes dos candidatos, e os valores são tuplas ```(total, percentual)``` com o total de votos recebidos por cada candidato e o percentual em relação à soma total de votos em todos os candidatos.
"""

def resultado_votacao(lista_votos):
    total_votos = sum(voto['votos'] for voto in lista_votos)
    resultado = {}
    for voto in lista_votos:
        nome = voto['nome']
        votos = voto['votos']
        percentual = (votos / total_votos) * 100
        resultado[nome] = (votos, percentual)
    return resultado

# Exemplo de uso:
lista_votos = [
    {'nome': 'João', 'votos': 350},
    {'nome': 'Maria', 'votos': 450},
    {'nome': 'José', 'votos': 300},
    {'nome': 'Ana', 'votos': 200}
]

resultado = resultado_votacao(lista_votos)
print(resultado)