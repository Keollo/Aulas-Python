# -*- coding: utf-8 -*-
"""5.2-Funções_Customizadas_Lambda-Exercícios.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WcOSMxueMX_xcFwX1u7QreEYwYxcRAAs

# Módulo 5 - Funções

## Aulas 5.2 - Funções Customizadas e 5.4 Funções ```lambda```

### Q1.

- Sabendo que o código a seguir calcula o fatorial de n, escreva uma função chamada ```fatorial()``` que recebe um inteiro ```n``` como parâmetro e retorna o resultado do fatorial de ```n```.
- No programa principal, peça ao usuário o valor de ```n```, chame a sua função e imprima o retorno.

```python
fat = 1
for i in range(1, n+1):
    fat *= i
```
"""

# Crie fatorial
def fatorial(n):
    fat = 1
    for i in range(1, n + 1):
        fat *= i
    return fat

# Execute a célula
n = int(input("Digite o valor de n: "))
resultado = fatorial(n)
print(f"O fatorial de {n} é {resultado}")

"""### Q2.

- Escreva uma função em Python chamada ```soma_quadrados``` que recebe dois números como parâmetros e retorna a soma dos seus quadrados.
- No programa principal solicite ao usuário que insira dois números e utilize a função para exibir a soma dos quadrados.
"""

# Crie função soma_quadrados
def soma_quadrados(a, b):
    return a**2 + b**2

# Programa principal
a = int(input("Digite o primeiro número: "))
b = int(input("Digite o segundo número: "))
resultado = soma_quadrados(a, b)
print(f"A soma dos quadrados de {a} e {b} é {resultado}")
## Programa principal

"""### Q3.

- Crie uma função em Python chamada ```soma_digitos``` que recebe um número inteiro como parâmetro e retorna a soma dos seus dígitos. Por exemplo, para o número 123, a função deve retornar 6, $(1 + 2 + 3)$.
    - O desafio aqui é separar os dígitos de um número inteiro usando operações aritméticas <br> <br>

- No programa principal solicite ao usuário que insira um número e utilize a função ```soma_digitos``` para calcular e exibir a soma dos seus dígitos.
"""

# Crie soma_digitos
def soma_digitos(n):
    soma = 0
    while n > 0:
        soma += n % 10
        n //= 10
    return soma

# Execute a célula
n = int(input("Digite um número: "))
resultado = soma_digitos(n)
print(f"A soma dos dígitos de {n} é {resultado}")

"""### Q4.

- Crie a função ```inverteValor()``` que recebe um inteiro de qualquer tamanho e retorna esse valor invertido usando apenas operações aritméticas
- Crie a função ```verificaInverso()``` que recebe o valor original e o valor invertido e retorna verdadeiro se ambos forem igualmente par ou igualmente ímpar. Retorne falso caso contrário.
- No programa principal, peça um valor do usuário e imprima o retorno de ambas as funções.

"""

# Crie as funções
def inverteValor(n):
    invertido = 0
    while n > 0:
        invertido = invertido * 10 + n % 10
        n //= 10
    return invertido

def verificaInverso(original, invertido):
    # Verifica se ambos são pares ou ímpares
    return (original % 2 == 0 and invertido % 2 == 0) or (original % 2 != 0 and invertido % 2 != 0)

# Execute a célula
n = int(input("Digite um número: "))
invertido = inverteValor(n)
paridade = verificaInverso(n, invertido)
print(f"O valor invertido de {n} é {invertido}")
print(f"Original e invertido têm a mesma paridade? {'Sim' se paridade else 'Não'}")

"""### Q5.

Você está desenvolvendo um programa para auxiliar em cálculos de geometria básica. Crie as seguintes funções:
- A função ```calcula_perimetro_triangulo()``` que recebe três inteiros correspondentes aos lados de um triângulo e retorna o perímetro do triângulo, ou seja, a soma dos seus lados.
- A função ```calcula_perimetro_circulo()``` que recebe um inteiro referente ao raio do círculo e retorna o perímetro do círculo, dado por $2 \pi r$. Use a constante $\pi$ da biblioteca ```math```.
- A função ```calcula_perimetro_retangulo()``` que possui um parâmetro obrigatório ```lado1``` e um opcional ```lado2```, ambos inteiros. Se o valor opcional não for fornecido, significa que se trata de um quadrado. Sua função deve calcular e retornar o perímetro do retângulo, ou seja, a soma de seus lados.
    - Para o quadrado, é dado por $4 \times lado1$
    - Para o retângulo é dado por $2 \times lado1 + 2 \times lado2$
    
- No programa principal apresente um menu com as opções disponíveis do seu sistema e uma quarta opção ```Sair```. Solicite ao usuário a opção desejada, solicite as entradas correspondentes à opção escolhida, invoque a respective função e apresente o seu retorno. Seu programa deve retornar ao menu até que o usuário escolha a opção ```Sair```

Exemplo de interação:
```
1 - Calcular perímetro triângulo
2 - Calcular perímetro círculo
3 - Calcular perímetro retângulo
4 - Sair

Opção: 1
Digite os três lados do triângulo:
3
4
5
O perímetro é: 12

1 - Calcular perímetro triângulo
2 - Calcular perímetro círculo
3 - Calcular perímetro retângulo
4 - Sair

Opção: 3
Informe os dois lados do retângulo. Se for um quadrado, digite 0 para o segundo valor:
5
0
O perímetro é: 20

1 - Calcular perímetro triângulo
2 - Calcular perímetro círculo
3 - Calcular perímetro retângulo
4 - Sair

Opção: 4
```
"""

import math

# Crie aqui as funções
def calcula_perimetro_triangulo(lado1, lado2, lado3):
    return lado1 + lado2 + lado3

def calcula_perimetro_circulo(raio):
    return 2 * math.pi * raio

def calcula_perimetro_retangulo(lado1, lado2=0):
    if lado2 == 0:
        lado2 = lado1
    return 2 * (lado1 + lado2)

# Escreva aqui o programa principal
while True:
    print("\n1 - Calcular perímetro triângulo")
    print("2 - Calcular perímetro círculo")
    print("3 - Calcular perímetro retângulo")
    print("4 - Sair")
    opcao = int(input("Opção: "))

    if opcao == 1:
        lado1 = int(input("Digite o primeiro lado do triângulo: "))
        lado2 = int(input("Digite o segundo lado do triângulo: "))
        lado3 = int(input("Digite o terceiro lado do triângulo: "))
        perimetro = calcula_perimetro_triangulo(lado1, lado2, lado3)
        print(f"O perímetro do triângulo é: {perimetro}")

    elif opcao == 2:
        raio = int(input("Digite o raio do círculo: "))
        perimetro = calcula_perimetro_circulo(raio)
        print(f"O perímetro do círculo é: {perimetro:.2f}")

    elif opcao == 3:
        lado1 = int(input("Informe o primeiro lado do retângulo: "))
        lado2 = int(input("Informe o segundo lado do retângulo (ou 0 para quadrado): "))
        perimetro = calcula_perimetro_retangulo(lado1, lado2)
        print(f"O perímetro é: {perimetro}")

    elif opcao == 4:
        print("Saindo...")
        break

    else:
        print("Opção inválida! Tente novamente.")

"""## Funções ```lambda```

### Q6.

Crie uma função lambda para verificar se um número é par ou ímpar. Em seguida, solicite ao usuário um número indefinidos de valores (até que o usuário digite 0). Para cada valor de entrada, informe se é par ou ímpar.

Exemplo de interação:
```
Digite os valores que deseja verificar a paridade (digite 0 para finalizar a entrada de dados):
3
ímpar
8
par
12
par
5
ímpar
7ímpar
```
"""

# Crie lambda
paridade = lambda x: "par" if x % 2 == 0 else "ímpar"

# Programa principal
print("Digite os valores que deseja verificar a paridade (digite 0 para finalizar a entrada de dados):")
while True:
    valor = int(input())
    if valor == 0:
        break
    print(paridade(valor))

"""### Q7.

Escreva um programa que pergunte ao usuário qual operação ele deseja: maior ou menor.
Em seguida leia uma quantidade indefinida de valores do usuário, até que o usuário digite o valor zero.
Apresente ao final o maior ou menor dos valores digitados de acordo com a escolha do usuário.

**Sua solução deve incluir pelo menos uma função ```lambda```**

Exemplo de interação:
```
Opções: (1) maior ou (2) menor?
Opção: 1

Digite os valores de entrada. Digite 0 para finalizar a entrada de valores.
4
12
15
1
0

O maior valor é: 15
```
"""

# Escreva o programa principal com função lambda
print("Opções: (1) maior ou (2) menor?")
opcao = int(input("Opção: "))

valores = []
print("Digite os valores de entrada. Digite 0 para finalizar a entrada de valores.")
while True:
    valor = int(input())
    if valor == 0:
        break
    valores.append(valor)

if opcao == 1:
    resultado = max(valores, key=lambda x: x)
    print(f"O maior valor é: {resultado}")
elif opcao == 2:
    resultado = min(valores, key=lambda x: x)
    print(f"O menor valor é: {resultado}")
else:
    print("Opção inválida!")